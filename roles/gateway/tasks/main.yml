---
- name: Install dnsmasq
  apt:
    name: dnsmasq
  register: dnsmasq_install_result

- name: Configure DHCPD config file
  template:
    src: dhcpcd.conf.j2
    dest: /etc/dhcpcd.conf
    owner: root
    group: netdev
    mode: u=rw,g=rw,o=r
    backup: yes
  notify:
    - restart dhcpcd

- name: Configure dnsmasq config file
  template:
    src: dnsmasq.conf.j2
    dest: /etc/dnsmasq.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
    backup: yes
  notify:
    - restart dnsmasq

- name: Pre-seed /etc/hosts file with all possible k8s node names
  lineinfile:
    path: /etc/hosts
    line: "{{ homek8s_gateway_network_dhcp_range_prefix }}{{ item }} k8s-node-{{ item }}"
  with_sequence: start={{ homek8s_gateway_network_dhcp_range_from }} end={{ homek8s_gateway_network_dhcp_range_to }}
  notify:
    - restart dnsmasq

# the above pre-seed task creates a duplicate entry for the master if a master entry is already there
# example master entry: 192.168.2.101 k8s-node-101 k8s-master-1
# duplicate created by pre-seed task: 192.168.2.101 k8s-node-101
# we need to delete this last / duplicate row
# the following task finds the master entry and returns a stripped down version (only the ip + node-name part)
- name: Determine master entry in /etc/hosts
  command: grep -oP ".+(?= k8s-master-[0-9]+)" /etc/hosts
  register: gateway_master_entry_result
  changed_when: False
  failed_when: False

- name: Delete duplicate entry for master in /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: absent
    regexp: "^{{ gateway_master_entry_result.stdout }}$"
  when: (gateway_master_entry_result.rc == 0) and (gateway_master_entry_result.stdout | length > 0)

- name: Create tftp directory
  file:
    path: /srv/tftp
    state: directory
    mode: 'u=rwx,g=rx,o=rx'
    owner: dnsmasq
    group: nogroup

- name: Download and unarchive debian netboot archive
  unarchive:
    remote_src: yes
    src: https://debian.inf.tu-dresden.de/debian/dists/{{ homek8s_gateway_provisioning_debian_release }}/main/installer-amd64/current/images/netboot/netboot.tar.gz
    dest: /srv/tftp
    owner: dnsmasq
    group: nogroup
  notify:
    - restart dnsmasq

- name: Copy pxelinux default conf file
  template:
    src: pxelinux.cfg.default.j2
    dest: /srv/tftp/pxelinux.cfg/default
    owner: dnsmasq
    group: nogroup
    mode: u=rw,g=r,o=r
    backup: yes
  notify:
    - restart dnsmasq

- name: Copy debian auto install preseed file
  template:
    src: preseed.cfg.j2
    dest: /srv/tftp/preseed.cfg
    owner: dnsmasq
    group: nogroup
    mode: u=rw,g=r,o=r
    backup: yes
  notify:
    - restart dnsmasq

- name: Create homek8s base directory
  file:
    path: "{{ homek8s_gateway_base_dir }}"
    state: directory
    mode: 'u=rwx,g=rx,o='
    owner: root
    group: root

- name: Create homek8s scripts directory
  file:
    path: "{{ homek8s_gateway_base_dir }}/scripts"
    state: directory
    mode: 'u=rwx,g=rx,o='
    owner: root
    group: root

- name: Create homek8s data and new_nodes directory
  file:
    path: "{{ homek8s_gateway_base_dir }}/data/new_nodes"
    state: directory
    mode: 'u=rwx,g=rx,o='
    owner: root
    group: root

- name: Add dhcp hook script to register new nodes
  template:
    src: dhcp_hook.sh.j2
    dest: "{{ homek8s_gateway_base_dir }}/scripts/dhcp_hook.sh"
    mode: 'u=rwx,g=rx,o='
    owner: root
    group: root

- name: Allow ipv4 forwarding for nodes
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes

# Set iptables rules to forward nodes' traffic to external network
# see https://blog.sebastian-martens.de/2017/02/configure-raspberry-pi-as-wlan-to-ethernet-bridge/

# raw rule: iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
- name: Add iptables rule for MASQUERADE over external interface
  iptables:
    table: nat
    action: append
    chain: POSTROUTING
    out_interface: "{{ homek8s_gateway_network_external_interface_name }}"
    jump: MASQUERADE
  notify:
    - save iptables

# raw rule: iptables -A FORWARD -i wlan0 -o eth0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
# original rule documented in the link above uses "-m state --state RELATED,ESTABLISHED" instead of conntrack;
# if conntrack does not work, switch back to -m state.
# original rule on raspi pi: iptables -A FORWARD -i wlan0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
- name: Add iptables rule for accepting responses to forwarded connections
  iptables:
    action: append
    chain: FORWARD
    in_interface: "{{ homek8s_gateway_network_external_interface_name }}"
    out_interface: "{{ homek8s_gateway_network_switch_interface_name }}"
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  notify:
    - save iptables

# raw rule: iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPT
- name: Add iptables rule for forwarding traffic from dedicated switch interface to external interface
  iptables:
    action: append
    chain: FORWARD
    in_interface: "{{ homek8s_gateway_network_switch_interface_name }}"
    out_interface: "{{ homek8s_gateway_network_external_interface_name }}"
    jump: ACCEPT
  notify:
    - save iptables

- name: Restore iptables rules during boot
  lineinfile:
    path: /etc/rc.local
    line: iptables-restore < /etc/iptables.ipv4.nat
    insertbefore: exit 0

- name: Copy ssh key pair to give gateway access to nodes
  copy:
    src: "{{ item }}"
    dest: "{{ homek8s_gateway_base_dir }}/"
    owner: "root"
    mode: 'u=rw,g=,o='
  loop:
    - "/homek8s/id_rsa"
    - "/homek8s/id_rsa.pub"